<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="it">
<head>
<title>Programmiamo</title>
<meta name="keywords" content="programmiamo, programmi, linguaggi, javascript, visual basic"/>
<meta name="description" content="linguaggi di programmazione"/>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href=" ../css/principale.css" rel="stylesheet" type="text/css"/>
<link href=" ../css/classi.css" rel="stylesheet" type="text/css"/>
<style type="text/css">
.style4 {
				text-align: left;
}
</style>
</head>
<body>
  <div id="contenitore2">
    <!-- Contneuti -->
        <div class="titolo"> Oggetti predefiniti in Javascript</div>
        <p>Come abbiamo gi� avuto modo di ribadire pi� volte, gli oggetti sono 
		molto utilizzati in JS, al punto da essere intimamente legati alla 
		struttura stessa del linguaggio. Molte volte i programmatori JS 
		utilizzano oggetti senza neppure sapere di farlo!</p>
	<p>Tra gli oggetti predefiniti in JS (Object Built-in Types) abbiamo:</p>
	<ul>
					<li>i vettori o array</li>
					<li>le date</li>
					<li>le funzioni (ebbene s�: anche le funzioni sono oggetti!)</li>
					<li>le funzioni matematiche predefinite (oggetto Math)</li>
	</ul>
	<p>e altre cose di cui ora non ci occuperemo. Inoltre alcune cose che 
	tecnicamente non sono oggetti (come per esempio le <em>stringhe</em>, che in realt� 
	sono <em>primitive</em> - un concetto che non vogliamo qui approfondire) 
	vengono trattati da JS come oggetti. Si parla in questi casi di&nbsp; <em>primitives wrapper types: </em>
	in pratica si tratta di <em>primitive</em> &quot;travestite&quot; da oggetti, in modo da poter loro applicare le 
	propriet� e i metodi degli oggetti veri e propri. Si tratta di argomenti 
	molto specialistici e che riteniamo siano di scarso interesse per i lettori 
	e perci� ci limitiamo qui a farne rapidissimo cenno. Se aggiungiamo al 
	nostro elenco di oggetti predefiniti anche i primitives weapper types 
	abbiamo:</p>
	<ul>
					<li>le stringhe (String)</li>
					<li>i numeri (Number)</li>
					<li>i valori booleani (Boolean)</li>
	</ul>
	<p>Se ancora non vi basta, come vedremo pi� avanti, il JS utilizza gli 
	oggetti per rappresentare il browser (attraverso il Browser Object Model) e 
	il documento html con tutti i suoi elementi (attraverso il Document Object 
	Model).</p>

	<p class="style4">Insomma, se non � proprio vero che in JS qualsiasi cosa � 
	un oggetto... poco ci manca!</p>

        <p>&nbsp;</p>
</div>
    <!-- Fine Contenuti -->
</body>
</html>




<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="it" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
<head>
<title>Programmiamo</title>
<meta name="keywords" content="programmiamo, programmi, linguaggi, javascript, visual basic"/>
<meta name="description" content="linguaggi di programmazione"/>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href=" ../css/principale.css" rel="stylesheet" type="text/css"/>
<link href=" ../css/classi.css" rel="stylesheet" type="text/css"/>
<script type="text/JavaScript">
function startTime() {
    var t = setInterval(Time, 500);
    }

function Time() {
    var today = new Date();
    var h = today.getHours();
    var m = today.getMinutes();
    var s = today.getSeconds();
    m = checkTime(m);
    s = checkTime(s);
    document.getElementById('orologio').innerHTML =
    h + ":" + m + ":" + s;
}
function checkTime(i) {
    if (i < 10) {i = "0" + i};  // add zero in front of numbers < 10
    return i;
}</script>

</head>
<body onload="startTime()">
  <div id="contenitore2">
    <!-- Contneuti -->

	<div class="titolo">

	  Il metodo setTimeout e clearTimeout</div>
        <p>Il metodo setTimeout funziona in modo molto simile a setInterval. La 
		differenza &eacute; che in questo caso la funzione indicata viene chiamata solo 
		una volta allo scadere del tempo di ritardo indicato:</p>
        <div class="code">
          &nbsp;window.setTimeout(funz, milli); </div>
	<p>o in modo equivalente, senza indicare window:</p>
        <div class="code">
          &nbsp;setTimeout(funz, milli); </div>
	<p>Nel caso in cui si voglia azzerare un timer precedentemente avviato con 
	setTimeout, bisogna memorizzare il timer in una variabile e quindi usare il 
	metodo clearTimeout, in modo perfettamente analogo a quanto visto con 
	setInterval e clearInterval:</p>
        <div class="code">
          x =
          setTimeout(stampa, 500); <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			....<br />
			clearTimeout(x);</div>
	<p>La setTimeout ha come scopo quello di introdurre un ritardo fra 
	l'esecuzione di due eventi. Tuttavia, come vedremo fra un attimo, pu&eacute; anche 
	essere usata per ripetere pi&eacute; volte l'esecuzione di un evento (in modo 
	simile alla setInterval).</p>

	<div class="titolo">

	  Usare setTimeout per ripetere un evento</div>
        <p>Sebbene JS preveda un'apposita funzione setInterval per gli eventi 
		che devono ripetersi pi&eacute; volte a intervalli di tempo fissi, &eacute; possibile 
		anche ripetere un evento usando la setTimeout per richiamare 
		ricorsivamente una stessa funzione. Si consideri l'esempio qui sotto, 
		che mostra una realizzazione alternativa dell'orologio visto nella 
		precedente lezione:</p>
        <div class="code">
          function startTime() <br />
&nbsp;&nbsp;&nbsp; { <br />
&nbsp;&nbsp;&nbsp; var today = new Date(); <br />
&nbsp;&nbsp;&nbsp; var h = today.getHours(); <br />
&nbsp;&nbsp;&nbsp; var m = today.getMinutes(); <br />
&nbsp;&nbsp;&nbsp; var s = today.getSeconds(); <br />
&nbsp;&nbsp;&nbsp; m = checkTime(m); <br />
&nbsp;&nbsp;&nbsp; s = checkTime(s); <br />
&nbsp;&nbsp;&nbsp; document.getElementById('orologio').innerHTML = h + &quot;:&quot; + m + 
			&quot;:&quot; + s; <br />
&nbsp;&nbsp;&nbsp; var t = setTimeout(startTime, 500); <br />
&nbsp;&nbsp;&nbsp; } <br />
			<br />
			function checkTime(i) <br />
&nbsp;&nbsp;&nbsp; { <br />
&nbsp;&nbsp;&nbsp; if (i &lt; 10) <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = &quot;0&quot; + i<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }; <br />
&nbsp;&nbsp;&nbsp; }</div>
	<p>In questo caso la funzione startTime (avviata al caricamento della 
	pagina) chiama al proprio interno la setTimeout, la quale a sua volta chiama 
	la funzione startTime in modo ricorsivo.</p>
	<p>&nbsp;</p>

	<div class="titolo">

	  Differenza fra setTimeout e setInterval per ripetere un evento</div>
        <p>Si noti che c'&eacute; una piccola differenza fra l'uso di setInteval e di 
		setTimeout, come nell'esempio sopra. Infatti setInterval chiama la 
		funzione allo scadere di ogni intervallo indicato, indipendentemente dal 
		tempo impiegato per l'esecuzione della funzione stessa. Se il tempo di 
		esecuzione della funzione &eacute; inferiore all'intervallo di ritardo, ci&eacute; non 
		crea nessun problema.</p>
	<p><img src="../img/interval1.png" /></p>
	<p>Se per&eacute; l'intervallo &eacute; minore del tempo di esecuzione della funzione 
	chiamata, allo scadere dell'intervallo la funzione precedente risulter&eacute; 
	ancora in esecuzione. Il JS non esegue immediatamente la funzione, ma 
	aspetta che la precedente sia completata (la mette in coda). Questo provoca 
	un ritardo nei tempi effettivi di esecuzione della funzione, come mostrato 
	in figura:</p>
	<p><img src="../img/interval3.png" /></p>
	<p>Invece setTimeout chiama la funzione solo dopo che il codice della 
	precedente &eacute; stato eseguito. In sostanza setTimeout ripete la chiamata un 
	po' dopo il tempo prefissato (quanto dopo, dipende dal tempo impiegato per 
	eseguire la funzione).</p>
	<p>Per funzioni che vengono eseguite in tempi brevi (minori della durata 
	dell'intervallo) in pratica non c'&eacute; nessuna differenza. Se invece le 
	funzioni durano pi&eacute; tempo dell'intervallo, l'uso di setInterval pu&eacute; 
	provocare un accumulo di funzioni in coda per essere eseguite e quindi 
	appesantire e rallentare il funzionamento del browser.</p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
</div>
    <!-- Fine Contenuti -->
</body>
</html>



